----------------------------
- OHJE BITTIEN KƒSITTELYYN -
----------------------------

JOHDANTO
--------
Yksi tavu sis‰lt‰‰ normaaleissa tietokoneissa aina 8 bitti‰, joista
jokaisella on bin‰‰rinen arvo 0 tai 1. Tietokone osaa k‰sitell‰
asioita vain tavu kerrallaan, joten bitit t‰ytyy lukea ja kirjoittaa
v‰livaiheen avulla.

Tekstin aiheena on bittien k‰sitteleminen. Ensin
k‰yd‰‰n l‰pi lukujen bin‰‰riesitys ja tavallisimmat
bittioperaatiot. Lis‰ksi annetaan metodit muunnoksiin
tavujen ja bittitaulukoiden v‰lill‰ Java-kielell‰. Lopuksi
annetaan yleiset suuntaviivat bin‰‰risten tiedostojen
lukemiseen ja kirjoittamiseen.



LUKUJEN BINƒƒRIESITYS
---------------------
Jokaista 10-j‰rjestelm‰n lukua vastaa jokin bin‰‰rij‰rjestelm‰n
(2-j‰rjestelm‰n) luku ja toisin p‰in.

Luvut voidaan ilmaista kantalukujen potenssien avulla:
10-j‰rjestelm‰ss‰ 1204 = 1*10^3 + 2*10^2 + 0*10^1 + 4*10^0

10-j‰rjestelm‰ --> 2-j‰rjestelm‰:
1204 = 1024 + 128 + 32 + 16 + 4
     = 1024   + 0     + 0     + 128   + 0     + 32    + 16    + 0     + 4     + 0     + 0
     = 1*2^10 + 0*2^9 + 0*2^8 + 1*2^7 + 0*2^6 + 1*2^5 + 1*2^4 + 0*2^3 + 1*2^2 + 0*2^1 + 0*2^0
     = 1        0       0       1       0       1       1       0       1       0       0 (bin)
     = 10010110100 (bin)

2-j‰rjestelm‰ --> 10-j‰rjestelm‰:
1001011 (bin) = 1*2^6 + 0*2^5 + 0*2^4 + 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0
              = 1*64  + 0*32  + 0*16  + 1*8   + 0*4   + 1*2   + 1*1
              = 64    + 0     + 0     + 8     + 0     + 2     + 1
              = 75

Tietokoneissa luvun ensimm‰inen bitti on varattu etumerkiksi.
Arvo 0 tarkoittaa positiivista ja arvo 1 negatiivista lukua.

Javassa kokonaislukutyyppi byte ja C-kieless‰ char viev‰t tilaa
yhden tavun eli 8 bitti‰. 8 bitill‰ voi ilmaista 2^8 = 256 erilaista
lukua.

Javan byte-tyypin arvoalue on [-128, +127]:
01111111 = + 127
...
00011011 = + 27
...
00000001 = + 1
00000000 = + 0
11111111 = - 1
...
10000010 = - 126
...
10000000 = - 128

C-kielen signed char -tyyppin arvoalueeksi on m‰‰ritelty ainakin
[-127, +127]. Tarkat arvot riippuvat k‰ytˆss‰ olevasta laitteistosta.
Yleens‰ arvoalue on [-128, +127], mutta standardi ei takaa t‰t‰.

Lukujen ylivuodot ovat mahdollisia. Kun 8-bittisen muuttujan
arvoon +127 lis‰t‰‰n ykkˆnen, saadaan luku -128. T‰m‰ voi
vaihdella riippuen laitteistosta. 
  127    +    1    =   -128
01111111 + 0000001 = 10000000

Huomaa, ett‰ Javan tyyppi char vie 2 tavua ja sen arvoalue
on [0, 65535]. Paras tapa lukea puhtaita tavuja esim. tiedostosta
on k‰ytt‰‰ FileInputStream-luokkaa, koska silloin
luettavat merkit ovat aina int-tyyppisi‰ (luvut [0, 255]).
Jonkin muun luokan k‰ytt‰minen (esim. FileReader) saataa johtaa
Unicode-merkkien lukemiseen (arvot [256, 65535]), mik‰ ei ole
aina toivottavaa. Muista k‰ytt‰‰ myˆs BufferedInputStream-luokkaa.
Kirjoittamiseen voi k‰ytt‰‰ vastaavia Output-luokkia.

C-kieless‰ on suositeltavaa k‰ytt‰‰ tyyppi‰ unsigned char,
jonka arvoalue on ainakin [0, 255]:

Useimmissa laitteistoissa:

char    unsigned char
---------------------
   0  |-->     0
  +1  |-->    +1
 ...        ...
+127  |-->  +127
-128  |-->  +128
-127  |-->  +129
-126  |-->  +130
 ...        ...
  -2  |-->  +254
  -1  |-->  +255


Pilkunviilausta, jos kiinnostaa tiet‰‰:
Joissakin harvinaisissa tapauksissa bittien m‰‰r‰ ei ole 8.
Bittien lukum‰‰r‰ tavussa on m‰‰ritelty C-kieless‰ makrolla
"CHAR_BIT" otsikkotiedostossa <limits.h>. Samaten Javassa on
m‰‰ritelty vakio "Byte.SIZE".




BITTISIIRROT
------------
Bittisiirrot ovat operaatioita, joilla luvun bittej‰ voi
siirt‰‰ vasemmalle tai oikealle.

Esimerkkej‰:

Luvun 6 bin‰‰riesitys 8 bitill‰ (tavu) on 00000110 (2^2 + 2^1 = 6).
Luvun 5 bin‰‰riesitys 8 bitill‰ (tavu) on 00000101.

Bittisiirto vasemmalle yhdell‰:  6 << 1 = 12, sill‰
00000110 << 1 = 00001100 eli 2^3 + 2^2 = 12.
     ^^             ^^

Bittisiirto oikealle yhdell‰:    6 >> 1 = 3, sill‰
00000110 >> 1 = 00000011 eli 2^1 + 2^0 = 3.
     ^^               ^^

Myˆs pidemm‰t siirrot ovat mahdollisia:
Bittisiirto vasemmalle nelj‰ll‰: 6 << 4 = 96, sill‰
00000110 << 4 = 01100000 eli 2^6 + 2^5 = 96
     ^^          ^^

Siirto vasemmalle tarkoittaa itse asiassa kertomista kahdella ja
siirto vasemmalle jakamista kahdella (kokonaisjako).
Esimerkiksi kokonaisjako 5/2 voidaan esitt‰‰ bittisiirtona 5 >> 1:
00000101 >> 1 = 0000010 = 1*2^1 = 2
     ^ ^             ^ ^
 
Kertolasku 5*8 voidaan esitt‰‰ bittisiirtona 5 << 3, koska 8 = 2^3:
00000101 << 3 = 00101000 = 1*2^5 + 1*2^3 = 32 + 8 = 40
     ^ ^          ^ ^

Oikealle siirrett‰ess‰ oikeanpuoleinen bitti siis valui
reunalta yli (bitin ylivuoto). Sama tapahtuisi myˆs vasemmalla
laidalla, jos siirto vasemmalle olisi ollut riitt‰v‰n suuri.

C-kieless‰ on suositeltavaa k‰ytt‰‰ bittisiirtoja vain
unsigned-kokonaisluvuille, sill‰ negatiivisten lukujen
bittisiirrot saattavat tuottaa laitteistosta riippuen
erilaisia lopputuloksia. Jos oikealle siirrett‰v‰ luku
on tyyppi‰ signed ja sen vasemmanpuoleisin bitti on
ykkˆnen, luku on tulkittavissa negatiiviseksi. Kun
t‰llaiselle luvulle suoritetaan bittisiirto oikealle,
vasemmalle j‰‰v‰t bittipaikat asetetaan yleens‰ nolliksi.
Joissakin laitteistoissa saatetaan kuitenkin muuttaa
vasemmanpuoleisin bitti ykkˆseksi ilmaisemaan negatiivisuutta.



LOOGISET BITTIOPERAATIOT
------------------------
Sek‰ C-kieless‰ ett‰ Javassa operaattori && vastaa loogista
AND-operaatiota ja || loogista OR-operaatiota. Seuraavaksi
esitell‰‰n n‰iden operaatioiden bititt‰iset vastineet.

Bititt‰inen AND:
Muuttujat A ja B ovat lukuja.
Lausekkeen "A & B" tulos on luku. Luvun bitti on ykkˆnen jos ja
vain jos lukujen A ja B vastaava bitti on molemmilla ykkˆnen.

Esim. 8-bittisill‰ luvuilla:
5      = 00000101
22     = 00010110
-----------------
5 & 22 = 00000100 = 4

Bititt‰inen OR:
Lausekkeen "A | B" tulos on luku. Luvun bitti on ykkˆnen jos ja
vain jos luvun A tai luvun B (tai molempien) bitti vastaavalla
kohdalla on ykkˆnen.
5      = 00000101
22     = 00010110
-----------------
5 | 22 = 00010111 = 23

Bititt‰inen XOR (poissulkeva OR):
Lausekkeen "A ^ B" tulos on luku. Luvun bitti on ykkˆnen jos ja
vain jos joko luvun A tai luvun B bitti vastaavalla kohdalla
on ykkˆnen, mutta ei molempien.
5      = 00000101
22     = 00010110
-----------------
5 ^ 22 = 00010011 = 19

Bititt‰inen komplementti (negaatio):
Lausekkeen "~A" (tilde, mato) tulos on luku. Luvun
bitti on ykkˆnen jos ja vain jos joko luvun A bitti vastaavalla
kohdalla on nolla.
5      = 00000101
~5     = 11111010 =
Mahdolliset tulkinnat:
  <Javan byte> = -6
  <C:n signed char> = -6
  <C:n unsigned char> = +250

Luku, jossa kaikki bitit ovat ykkˆsi‰, saadaan helposti
operaatiolla ~0, sill‰ luvun 0 kaikki bitit ovat pois
p‰‰lt‰.




TAVUSTA BITEIKSI
----------------
On olemassa useita tapoja muuttaa kokonaisluku bittiesitykseksi
- t‰ss‰ on niist‰ yksi. Javassa tavut kannattaa s‰ilytt‰‰ int-tyyppisin‰,
jotta niiden arvov‰li olisi aina ep‰negatiivinen [0, 255]. T‰m‰ onnistuu
k‰ytt‰m‰ll‰ InputStream- ja OutputStream-luokkien aliluokkia, esim.
FileInputReader- ja FileOutputReader-luokkia. Myˆs C-kieless‰ kannattaa
k‰ytt‰‰ tyyppi‰ int.

	/**
	 * Palauttaa parametrina saadun luvun 8 v‰hiten merkitsev‰‰
	 * bitti‰ taulukossa (luvut [0, 255]).
	 *
	 * @param data muunnettava tavu, lukuarvo v‰lilt‰ [0, 255]
	 * @return parametrin 8 v‰hiten merkitsev‰‰ bitti‰ taulukossa,
	 *         v‰hiten merkitsev‰ bitti on viimeisess‰ indeksiss‰.
	 */
	public static boolean[] byteToBits(int data) {
		if (data < 0 || 255 < data) {
			throw new IllegalArgumentException("" + data);
		}

		boolean[] bits = new boolean[8];
		for (int i=0; i < 8; i++) {
			bits[i] = ( (data & (1 << (7-i)) ) != 0 );
		}
		return bits;
	}



BITEISTƒ TAVUKSI
----------------
On olemassa useita tapoja muuttaa bitit vastaavaksi kokonaisluvuksi
- t‰ss‰ on niist‰ yksi. Javassa tavut kannattaa s‰ilytt‰‰ int-tyyppisin‰,
jotta niiden arvov‰li olisi aina ep‰negatiivinen [0, 255]. T‰m‰ onnistuu
k‰ytt‰m‰ll‰ InputStream- ja OutputStream-luokkien aliluokkia, esim.
FileInputReader- ja FileOutputReader-luokkia. Myˆs C-kieless‰ kannattaa
k‰ytt‰‰ tyyppi‰ int.

	/**
	 * Muuttaa parametrina saadun bittitaulukon bitit
	 * vastaavaksi kokonaisluvuksi v‰lilt‰ [0, 255].
	 *
	 * @param 8-paikkainen bittitaulukko, v‰hiten merkitsev‰ bitti
	 *        viimeisess‰ indeksiss‰.
	 * @return bittien kokonaislukuesitys v‰lilt‰ [0, 255]
	 */
	public static int bitsToByte(boolean[] bits) {
		if (bits == null || bits.length != 8) {
			throw new IllegalArgumentException();
		}

		int data = 0;
		for (int i = 0; i < 8; i++) {
			if (bits[i]) data += (1 << (7-i));
		}
		return data;
	}



BITTIEN LUKEMINEN TIEDOSTOSTA:
------------------------------
Koska tietokone ei osaa lukea tiedostoa biteitt‰in, bititt‰isyys
on hoidettava v‰livaiheen avulla:

- Toistetaan, kunnes tiedosto on p‰‰ttynyt {
    - Lue tiedostosta seuraava tavu B
    - Selvit‰ tavun B sis‰lt‰m‰t bitit esim. byteToBits()-metodin avulla
    - Toistetaan tavun B biteille 1--8 {
        - ...
    }
}

Huom! Lukemisessa t‰ytyy huomioida, ett‰ viimeinen tavu voi sis‰lt‰‰
joitakin roskabittej‰. Katso "BITTIEN KIRJOITTAMINEN TIEDOSTOON".




BITTIEN KIRJOITTAMINEN TIEDOSTOON:
----------------------------------
Tiedostoon ei voi kirjoittaa bitti kerrallaan. Kirjoitettavia
bittej‰ on puskuroitava, kunnes niit‰ on kertynyt 8 kpl. Kun
bittej‰ on kertynyt puskuriin 8 kpl, niist‰ voidaan muodostaa
tavu esim. bitsToByte()-metodin avulla. T‰m‰ tavu voidaan kirjoittaa
tiedostoon. Kirjoittamisen j‰lkeen puskuri tyhjennet‰‰n.

Kirjoitettavien bittien kokonaism‰‰r‰ ei ole kuitenkaan aina
jaollinen luvulla 8. Mit‰ jos kirjoitettavia bittej‰ on yhteens‰
esim. 19 kpl, eik‰ enemp‰‰ bittej‰ tule kirjoitettavaksi? T‰m‰
tuottaa 2 kokonaista kirjoitettavaa tavua (2 * 8 bitti‰) ja 3
bitti‰ ylim‰‰r‰ist‰. Ainoa ratkaisu on lis‰t‰ sen verran ns.
roskabittej‰ puskuriin, ett‰ j‰ljell‰ olevien bittien
kokonaism‰‰r‰ on 8. Roskabitit voivat kaikki olla nollia. T‰m‰
8 bitin muodostama tavu voidaan kirjoittaa tiedostoon. Tiedostoa
luettaessa t‰ytyy huomioida, ett‰ viimeisess‰ tavussa saattaa
olla mukana roskabittej‰. Tunnistaminen vaihtelee ohjelman mukaan,
mutta perustuu yleens‰ siihen, ett‰ tiedoston loppuminen
aavistetaan jo ennen kuin tiedosto oikeasti loppuu.

Kirjoitettavat bitit, 19 kpl:

1. tavu  2. tavu  ylim‰‰r‰iset
-------- -------- ---
10011011 00110001 101


1. tavu  2. tavu  3.tavu
-------- -------- --------
10011011 00110001 10100000
                     ^^^^^
                     roskabitit




VINKKI
------ 
Ohjelmat kannattaa ensin toteuttaa niin, ett‰ bittien sijaan k‰sitell‰‰n
merkkej‰ (tavuja) '1' ja '0'. Bittitasolle kannattaa siirty‰ vasta sitten,
kun ohjelma toimii oikein merkkitasolla.


-- 
Esa Junttila 5.9.2005

